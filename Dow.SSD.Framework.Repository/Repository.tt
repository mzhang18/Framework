<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#
	var entityFrameworkDBContainer="SSDFrameworkSampleDBEntities";
#>

<#         
if(Errors.HasErrors)
{
    return String.Empty;
}

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string sourceCsdlPath = @"../Dow.SSD.Framework.Model/DBContext.edmx";
string namespaceName = code.VsNamespaceSuggestion();
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(sourceCsdlPath);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
WriteHeader(fileManager);

BeginNamespace(namespaceName, code);
EndNamespace(namespaceName);

// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{

	fileManager.StartNewFile(entity.Name + "Repository" + ".cs");
	BeginNamespace(namespaceName, code);

    bool entityHasNullableFKs = entity.NavigationProperties.Any(np => np.GetDependentProperties().Any(p=>ef.IsNullable(p)));
#>
<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=code.Escape(entity)#>Repository
{
		private <#=entityFrameworkDBContainer#> _context = null;

		public <#=code.Escape(entity)#>Repository(<#=entityFrameworkDBContainer#> context)
		{
			_context = context;
		}
		
		public bool Add(<#=code.Escape(entity)#> entity)
        {
			_context.<#=code.Escape(entity)#>s.Add(entity as <#=code.Escape(entity)#>);
			return true;
        }
		
		public bool Add(List<<#=code.Escape(entity)#>> entities)
        {
            entities.ForEach(entity =>
            {
                _context.<#=code.Escape(entity)#>s.Add(entity as <#=code.Escape(entity)#>);
            });

			return true;
        }

        public bool Update(<#=code.Escape(entity)#> entity)
        {
            _context.<#=code.Escape(entity)#>s.Attach(entity as <#=code.Escape(entity)#>);
            _context.Entry(entity as <#=code.Escape(entity)#>).State = EntityState.Modified;

			return true;
        }

        public bool Delete(<#=code.Escape(entity)#> entity)
        {
            _context.<#=code.Escape(entity)#>s.Attach(entity as <#=code.Escape(entity)#>);
            _context.<#=code.Escape(entity)#>s.Remove(entity as <#=code.Escape(entity)#>);
              
           	return true;
        }

        public bool Delete(List<<#=code.Escape(entity)#>> entities)
        {
            entities.ForEach(entity =>
            {
                _context.<#=code.Escape(entity)#>s.Attach(entity as <#=code.Escape(entity)#>);
                _context.<#=code.Escape(entity)#>s.Remove(entity as <#=code.Escape(entity)#>);
            });
            return true;
        }
     
        public bool Delete(Expression<Func<<#=code.Escape(entity)#>, bool>> predicate)
        {
            var deleteEntity = this.FindAllBy(predicate);
			this.FindAllBy(predicate).ToList().ForEach(entity =>
            {
                _context.<#=code.Escape(entity)#>s.Attach(entity as <#=code.Escape(entity)#>);
                _context.<#=code.Escape(entity)#>s.Remove(entity as <#=code.Escape(entity)#>);
            });

            return true;
        }

		public <#=code.Escape(entity)#> FindSingleBy(Expression<Func<<#=code.Escape(entity)#>, bool>> predicate)
        {           
		    _context.Configuration.ProxyCreationEnabled = false;
            var returnValue = _context.<#=code.Escape(entity)#>s.Where(predicate).FirstOrDefault();
            return returnValue as <#=code.Escape(entity)#>;
        }

		 public List<<#=code.Escape(entity)#>> FindAllBy(Expression<Func<<#=code.Escape(entity)#>, bool>> predicate)
        {
		    _context.Configuration.ProxyCreationEnabled = false;
            return _context.<#=code.Escape(entity)#>s.Where(predicate).ToList();
        }
     
        public List<<#=code.Escape(entity)#>> GetAll()
        {
			_context.Configuration.ProxyCreationEnabled = false;
            var returnValue = _context.<#=code.Escape(entity)#>s.ToList();
            return returnValue.Cast<<#=code.Escape(entity)#>>().ToList();
        }

		public void SaveChanges()
		{
			_context.SaveChanges();
		}
		
}
<#	
 EndNamespace(namespaceName); 
}

fileManager.Process();
#>

<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template, at <#=DateTime.Now#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dow.SSD.Framework.Model;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;

<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
}
}
#>

